
// Implicit import std.strs.String;

import std.io.stdout;
import std;

struct MappableArray<T> {
    import std.io;

    type Default = Self<f64>;

    arr: Vec<T>;
    
    // Shorthand for `inherit arr.push as push;`,
    // and syntactic sugar for:
    // func push(self: Self, value: T) {
    //     self.arr.push(value);
    // }
    inherit arr.push;
    inherit arr iterator;

    func create() {
        new Self {
            arr: Vec<T>.create()
        }
    }
    
    func map<Out>(mappable: Self, apply: func T -> Out) -> MappableArray<Out> {
        const newArray: Vec<Out> = Vec<Out>.new();
        loop(const element : mappable.arr) {
            newArray.push(apply(element));
        }
        newArray
    }
}

struct Synth {
    type SynthFunction<T> = func T -> T;
    type FloatSynthFunction = SynthFunction<f64>;

    userFunction: FloatSynthFunction;

    func create(userFunction: FloatSynthFunction) {
        new Synth {
            userFunction
        }
    }

    func setUserSynthesisFunction(synth: Self, userFunction: FloatSynthFunction) -> nil {
        synth.userFunction = userFunction;
    }
}

func main() -> i32 {
    const synth = Synth.create(func(i) {
        i * 2.0
    });
    synth.setUserSynthesisFunction(synth, func(i) {
        i * 3.0
    });
    synth.userFunction(2.0);
    
    const myString: String = "";

    const arr = MappableArray.Default.create();
    const mapped = arr.map<i32>(func(i) {
        std.f64Toi32(i)
    });

    0
}